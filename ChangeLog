2012-05-14 Kamil Ignacak
	* libcw/tone queue: cw_generator_write_sine_wave_internal(): using
	cw_signal_wait_internal() (together with pthread_kill() in enqueue
	function) instead of usleep() - this should decrease CPU usage in idle
	state; still needs to be tested and verified, but - overall - good
	idea; I think that this solution existed in libcw before I've started
	slaughtering the code, so consider this just rediscovering of a clever
	code;

2012-05-10 Kamil Ignacak
	* libcw/console: Console output now works correctly, playing nicely
	with queue()/dequeue() and the generator.

2012-05-06 Kamil Ignacak
	* cwcp/user interface: fixing small bug in code: till now modifying
	practice time didn't work correctly, any attempts to do so resulted
	in resetting the time to zero. Now this is fixed.

2012-05-01 Kamil Ignacak
	* libcw/experimental code: removed code that was disabled when
	CW_DEV_EXPERIMENTAL_WRITE was set to 1.

2012-05-01 Kamil Ignacak
	* libcw/audio: more changes in libcw; I'm decreasing dependency
	on timers, and increasing dependency on tone queue. I could put
	it that way: there are less places where time periods are dictated
	by itimers, and more places where time periods are measured by
	audio systems' 'write' functions. This way I am sure that when I'm
	sending X samples to audio sink, it - given sample rate Y - results
	in Z microseconds of sound.
	This seems like a good concept, it works well so far. I think that
	it will me impossible (and impractical) to get rid of all timers,
	but for generating audio - it works well.
	There may be a problem with console buzzer, as there is no audio
	sink that would accept X samples, but already I have an idea how
	to solve this.
	I've been using CW_DEV_EXPERIMENTAL_WRITE definition to enable new,
	experimental code, and disable old code. Since the new, experimental
	code works so well, I will completely get rid of the old code soon.

2012-04-25 Kamil Ignacak
	* libcw/ALSA: the problem described below has been solved, but
	at a cost of significant changes in how a Morse code sound is
	generated (timers are no longer used). This will almost certainly
	affect other parts of libcw (e.g. Morse keys handling), but it has
	advantages: timing of ALSA sound is (should be - to be tested)
	perfect, and I can easily add support for PulseAudio. (this change
	has been made and committed earlier, somewhere between 21.04 and
	24.04, I'm just describing it now).
	* libcw/PulseAudio: Adding support for PulseAudio.
	PulseAudio only works with "experimental write" enabled, so there
	is no way that I can have both PulseAudio and old algorithm for
	generating audio. Either I will have to refactor/refresh/rework
	rest of libcw.c (and then have PulseAudio), or I will leave old
	way of generating audio (not breaking things (yet) in applications
	using libcw, but also not having PulseAudio).

2012-04-21 Kamil Ignacak
	* libcw/ALSA: I've noticed that there is a problem with waveform
	produced with ALSA. Dits and dashes start at correct time, but
	they are ended incorrectly - either too soon, or too late.
	This results in dots and dashes of incorrect length. The length
	differences are small, but audible.
	I have ruled out problems with itimer. itimer doesn't produce
	perfect time intervals, but error introduced by itimer is way to
	small to result in described problem.
	The problem is probably related to delay introduced by
	snd_pcm_writei().
	I'm thinking about following solution: start generating tones (be
	it inter-symbol silence, or the symbols (dits and dashes) themselves)
	on signal generated by itimer, but stop generating dit/dash/silence
	after writing specific number of samples to audio device.
	In other words: start generating on timer events, stop generating on
	sample counter overflow.
	The problem doesn't seem to appear when using OSS output, perhaps
	because sound fragment size is much smaller than ALSA period size,
	e.g. 128 vs. 940.

2012-04-15 Kamil Ignacak
	* build system: Most important change: adding code that handles
	--disable-xxx options passed to the script:
	--disable-console
	--disable-oss
	--disable-alsa
	--disable-cwcp
	--disable-xcwcp
	The options allow disabling certain functionalities of unixcw, so
	that the package can be built on machines that don't provide some
	functions or properties.
	Example: unixcw 3.0.1 can't be compiled on hurd-i386 because of
	this error from configure script:
	"configure: error: Cannot find either sys/kd.h, sys/vtkd.h, or sys/kbio.h"
	At lease one of these headers is needed for console buzzer support.
	With new code in configure, compilation of code working with console
	buzzer can be disabled.
	Similarly, user can now disable compilation of OSS-related code on
	platforms that no longer provide OSS.
	Functionality can be disabled explicitly (with command line option),
	or implicitly - if any of tests performed by configure script fails.
	Changes described above required some modifications of libcw.c file.
	Also added --enable-dev.

	Build system now uses Makefile.am and Makefile.in files used/generated
	by Automake. Adding two calls to configure: AM_INIT_AUTOMAKE (build
	system now uses Automake to handle Makefile files), and
	AC_PROG_LIBTOOL (libtool is now used to create libraries).

	Build system now supports "make distcheck" target.

	Build system now depends on libtool.

