/*
  This file is part of unixcw project.

  unixcw project is distributed under the terms of GNU GPL 2+ license.
*/

#ifndef H_LIBCW2
#define H_LIBCW2





#include <stdint.h>    /* int16_t */
#include <stdbool.h>






enum cw_return_values {
	CW_FAILURE = false,
	CW_SUCCESS = true
};

/* Supported audio systems. */
enum cw_audio_systems {
	CW_AUDIO_NONE = 0,  /* initial value; this is not the same as CW_AUDIO_NULL */
	CW_AUDIO_NULL,      /* empty audio output (no sound, just timing); this is not the same as CW_AUDIO_NONE */
	CW_AUDIO_CONSOLE,   /* console buzzer */
	CW_AUDIO_OSS,
	CW_AUDIO_ALSA,
	CW_AUDIO_PA,        /* PulseAudio */
	CW_AUDIO_SOUNDCARD  /* OSS, ALSA or PulseAudio (PA) */
};

enum {
	CW_KEY_STATE_OPEN = 0,  /* key is open, no electrical contact in key, no sound */
	CW_KEY_STATE_CLOSED     /* key is closed, there is an electrical contact in key, a sound is generated */
};


typedef int16_t cw_sample_t;


#define CW_AUDIO_CHANNELS  1  /* Sound in mono. */

/* Default outputs for audio systems. Used by libcw unless
   client code decides otherwise. */
#define CW_DEFAULT_NULL_DEVICE      ""
#define CW_DEFAULT_CONSOLE_DEVICE   "/dev/console"
#define CW_DEFAULT_OSS_DEVICE       "/dev/audio"
#define CW_DEFAULT_ALSA_DEVICE      "default"
#define CW_DEFAULT_PA_DEVICE        "( default )"


/* Limits on values of CW send and timing parameters */
#define CW_SPEED_MIN             4   /* Lowest WPM allowed */
#define CW_SPEED_MAX            60   /* Highest WPM allowed */
#define CW_SPEED_STEP            1
#define CW_SPEED_INITIAL        12   /* Initial send speed in WPM */
#define CW_FREQUENCY_MIN         0   /* Lowest tone allowed (0=silent) */
#define CW_FREQUENCY_MAX      4000   /* Highest tone allowed */
#define CW_FREQUENCY_INITIAL   800   /* Initial tone in Hz */
#define CW_FREQUENCY_STEP       20
#define CW_VOLUME_MIN            0   /* Quietest volume allowed (0=silent) */
#define CW_VOLUME_MAX          100   /* Loudest volume allowed */
#define CW_VOLUME_INITIAL       70   /* Initial volume percent */
#define CW_VOLUME_STEP           1
#define CW_GAP_MIN               0   /* Lowest extra gap allowed */
#define CW_GAP_MAX              60   /* Highest extra gap allowed */
#define CW_GAP_INITIAL           0   /* Initial gap setting */
#define CW_GAP_STEP              1
#define CW_WEIGHTING_MIN        20   /* Lowest weighting allowed */
#define CW_WEIGHTING_MAX        80   /* Highest weighting allowed */
#define CW_WEIGHTING_INITIAL    50   /* Initial weighting setting */
#define CW_TOLERANCE_MIN         0   /* Lowest receive tolerance allowed */
#define CW_TOLERANCE_MAX        90   /* Highest receive tolerance allowed */
#define CW_TOLERANCE_INITIAL    50   /* Initial tolerance setting */





/* Representation characters for Dot and Dash.  Only these two
   characters are permitted in Morse representation strings. */
enum {
	CW_DOT_REPRESENTATION  = '.',
	CW_DASH_REPRESENTATION = '-'
};





/* Values deciding the shape of slopes of tones generated by
   generator.

   If a generated tone is declared to have one or two slopes,
   generator has to know what shape of the slope(s) should be. Since
   the shape of tones is common for all tones generated by generator,
   shape of tone is a property of generator rather than of tone.

   These names are to be used as values of argument 'slope_shape' of
   cw_generator_set_tone_slope() function.  */
enum {
	CW_TONE_SLOPE_SHAPE_LINEAR,          /* Ramp/linearly raising slope. */
	CW_TONE_SLOPE_SHAPE_RAISED_COSINE,   /* Shape of cosine function in range <-pi - zero).  */
	CW_TONE_SLOPE_SHAPE_SINE,            /* Shape of sine function in range <zero - pi/2). */
	CW_TONE_SLOPE_SHAPE_RECTANGULAR      /* Slope changes from zero for sample n, to full amplitude of tone in sample n+1. */
};





/* Forward declarations of data types. */
struct cw_gen_struct;
typedef struct cw_gen_struct cw_gen_t;





/* generator module: basic functions. */
cw_gen_t *cw_gen_new_internal(int audio_system, const char *device);
void      cw_gen_delete_internal(cw_gen_t **gen);
int       cw_gen_start_internal(cw_gen_t *gen);
int       cw_gen_stop_internal(cw_gen_t *gen);


/* generator module: getters of generator's basic parameters. */
int cw_gen_get_speed_internal(cw_gen_t *gen);
int cw_gen_get_frequency_internal(cw_gen_t *gen);
int cw_gen_get_volume_internal(cw_gen_t *gen);
int cw_gen_get_gap_internal(cw_gen_t *gen);
int cw_gen_get_weighting_internal(cw_gen_t *gen);


/* generator module: setters of generator's basic parameters. */
int cw_gen_set_frequency_internal(cw_gen_t *gen, int new_value);
int cw_gen_set_volume_internal(cw_gen_t *gen, int new_value);
int cw_gen_set_speed_internal(cw_gen_t *gen, int new_value);
int cw_gen_set_gap_internal(cw_gen_t *gen, int new_value);
int cw_gen_set_weighting_internal(cw_gen_t *gen, int new_value);


/* generator module: queue functions. */
int cw_gen_enqueue_representation_internal(cw_gen_t *gen, const char *representation, bool partial);
int cw_gen_enqueue_character_internal(cw_gen_t *gen, char c);
int cw_gen_enqueue_character_parital_internal(cw_gen_t *gen, char c);
int cw_gen_enqueue_string_internal(cw_gen_t *gen, const char *string);
/* TODO: replace usage of cw_gen_wait_for_queue_internal() with
   cw_gen_wait_for_queue_level_internal(). */
int cw_gen_wait_for_queue_internal(cw_gen_t *gen);
int cw_gen_wait_for_queue_level_internal(cw_gen_t *gen, int level);
uint32_t cw_gen_queue_length_internal(cw_gen_t *gen);


/* generator module: misc functions. */
int  cw_generator_set_tone_slope(cw_gen_t *gen, int slope_shape, int slope_usecs);
void cw_gen_flush_internal(cw_gen_t *gen);
const char *cw_gen_get_console_device_internal(cw_gen_t *gen);
const char *cw_gen_get_soundcard_device_internal(cw_gen_t *gen);


/* General functions: audio systems. */
extern bool cw_is_null_possible(const char *device);
extern bool cw_is_console_possible(const char *device);
extern bool cw_is_oss_possible(const char *device);
extern bool cw_is_alsa_possible(const char *device);
extern bool cw_is_pa_possible(const char *device);
extern const char *cw_get_audio_system_label(int audio_system);


/* General functions: library data. */
extern void cw_version(int *current, int *revision, int *age);
extern void cw_license(void);


/* General functions: limits. */
extern void cw_get_speed_limits(int *min_speed, int *max_speed);
extern void cw_get_frequency_limits(int *min_frequency, int *max_frequency);
extern void cw_get_volume_limits(int *min_volume, int *max_volume);
extern void cw_get_gap_limits(int *min_gap, int *max_gap);
extern void cw_get_tolerance_limits(int *min_tolerance, int *max_tolerance);
extern void cw_get_weighting_limits(int *min_weighting, int *max_weighting);


/* receiver module. */
extern void cw_reset_send_receive_parameters(void);


/* data module: phonetic alphabet. */
extern int cw_get_maximum_phonetic_length(void);
extern int cw_lookup_phonetic(char c, char *phonetic);


/* data module: extended Morse code data and lookup (procedural signals). */
extern int  cw_get_procedural_character_count(void);
extern void cw_list_procedural_characters(char *list);
extern int  cw_get_maximum_procedural_expansion_length(void);
extern int  cw_lookup_procedural_character(char c, char *representation, int *is_usually_expanded);


/* data module: core Morse code data and lookup. */
extern int   cw_get_character_count(void);
extern void  cw_list_characters(char *list);
extern int   cw_get_maximum_representation_length(void);
extern char *cw_character_to_representation(int c);
extern bool  cw_representation_is_valid(const char *representation);
extern int   cw_representation_to_character(const char *representation);


/* data module: misc. */
extern bool cw_character_is_valid(char c);
extern bool cw_string_is_valid(const char *string);


/* signals and reset. */
extern int  cw_register_signal_handler(int signal_number, void (*callback_func)(int));
extern int  cw_unregister_signal_handler(int signal_number);
extern void cw_complete_reset(void);
extern void cw_block_callback(int block);





#endif /* #ifndef H_LIBCW2 */
